{"version":3,"sources":["components/NavBar/NavBar.js","components/GraphGenerator/LineChart.js","components/GraphGenerator/GraphGenerator.js","components/Posts/Posts.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","LineChart","datas","data","React","useMemo","label","axes","primary","position","style","width","height","GraphGenerator","useState","content","setContent","textarea","setTextarea","headers","setHeaders","setData","dropDownValues","setDropDownValues","onSelect","event","update","target","name","value","what","onSubmit","preventDefault","result","csv","lines","replace","split","headrs","i","length","obj","currentline","j","trim","push","JSON","stringify","csvToJSON","csvHeaders","htmlFor","onChange","rows","xaxis","yaxis","gdata","parse","forEach","item","x","y","map","key","Posts","loading","setLoading","posts","setPosts","useEffect","fetch","then","res","json","response","console","log","scope","userId","title","body","colspaw","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4794ee5c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavBar = () => (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"{#}\">\r\n            Jaya Test\r\n        </a>\r\n        <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n            aria-controls=\"navbarNav\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n        >\r\n            <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item active\">\r\n                    <a to=\"#top\" className=\"nav-link\">\r\n                        Graphics <span className=\"sr-only\">(current)</span>\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a to=\"#posts\" className=\"nav-link\">\r\n                        API Connection\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { Chart } from 'react-charts';\r\n\r\n// eslint-disable-next-line\r\nconst LineChart = ({ datas }) => {\r\n    const data = React.useMemo(\r\n        () => [\r\n            {\r\n                label: 'Generated Chart',\r\n                data: datas,\r\n            },\r\n        ],\r\n        [datas]\r\n    );\r\n\r\n    const axes = React.useMemo(\r\n        () => [\r\n            { primary: true, type: 'linear', position: 'bottom' },\r\n            { type: 'linear', position: 'left' },\r\n        ],\r\n        []\r\n    );\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: '400px',\r\n                height: '300px',\r\n            }}\r\n        >\r\n            <Chart data={data} axes={axes} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LineChart;\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\nimport React from 'react';\r\nimport LineChart from './LineChart';\r\n\r\nconst GraphGenerator = () => {\r\n    const [content, setContent] = React.useState();\r\n    const [textarea, setTextarea] = React.useState();\r\n    const [headers, setHeaders] = React.useState();\r\n    const [data, setData] = React.useState();\r\n    const [dropDownValues, setDropDownValues] = React.useState();\r\n\r\n    const onChange = event => {\r\n        setTextarea(event.target.value);\r\n    };\r\n\r\n    const onSelect = event => {\r\n        const update = { ...dropDownValues };\r\n        const { name, value } = event.target;\r\n        const what = name === 'x-axis' ? 'xaxis' : 'yaxis';\r\n        setDropDownValues({ ...update, [what]: value });\r\n    };\r\n\r\n    const csvToJSON = csv => {\r\n        const lines = csv.replace(', ', ',').split('\\n');\r\n        const result = [];\r\n        const headrs = lines[0].replace(', ', ',').split(',');\r\n        for (let i = 1; i < lines.length; i += 1) {\r\n            const obj = {};\r\n            const currentline = lines[i].replace(', ', ',').split(',');\r\n            for (let j = 0; j < headrs.length; j += 1) {\r\n                obj[headrs[j].trim()] = currentline[j].trim();\r\n            }\r\n            result.push(obj);\r\n        }\r\n        return JSON.stringify(result);\r\n    };\r\n\r\n    const csvHeaders = csv => {\r\n        const lines = csv.replace(', ', ',').split('\\n');\r\n        const headrs = lines[0].replace(', ', ',').split(',');\r\n        setHeaders(headrs);\r\n    };\r\n\r\n    const onCreateChart = event => {\r\n        event.preventDefault();\r\n        const { xaxis, yaxis } = dropDownValues;\r\n        const gdata = [];\r\n        JSON.parse(content).forEach(item => gdata.push({ x: item[xaxis], y: item[yaxis] }));\r\n        setData(gdata);\r\n    };\r\n\r\n    const onObtainData = event => {\r\n        event.preventDefault();\r\n        setData();\r\n        const result = csvToJSON(textarea);\r\n        setContent(result);\r\n        csvHeaders(textarea);\r\n    };\r\n\r\n    return (\r\n        <div className=\"row mt-4\">\r\n            <div className=\"col-md-6\">\r\n                <form onSubmit={onObtainData}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"to-capture\">Insert Your CSV Content</label>\r\n                        <textarea className=\"form-control\" id=\"to-capture\" name=\"to-capture\" onChange={onChange} rows=\"10\" />\r\n                        <button type=\"submit\" className=\"btn btn-primary mt-4\">\r\n                            Process\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                <form onSubmit={onCreateChart}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"to-capture\">Result and DropDown</label>\r\n                        <div className=\"alert alert-secondary\">\r\n                            <code className=\"code\">CSV toJSON: {content}</code>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"x-axis\">Select the X-Axis</label>\r\n                        <select className=\"form-control\" id=\"x-axis\" name=\"x-axis\" onChange={onSelect}>\r\n                            <option>{headers ? 'Select The X-Axis' : 'Put the CSV Content'}</option>\r\n                            {headers\r\n                                ? headers.map((item, key) => (\r\n                                      <option key={key} value={item}>\r\n                                          {item}\r\n                                      </option>\r\n                                  ))\r\n                                : ''}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"y-axis\">Select the Y-Axis</label>\r\n                        <select className=\"form-control\" id=\"y-axis\" name=\"y-axis\" onChange={onSelect}>\r\n                            <option>{headers ? 'Select The Y-Axis' : 'Put the CSV Content'}</option>\r\n                            {headers\r\n                                ? headers.map((item, key) => (\r\n                                      <option key={key} value={item}>\r\n                                          {item}\r\n                                      </option>\r\n                                  ))\r\n                                : ''}\r\n                        </select>\r\n                        <button type=\"submit\" className=\"btn btn-primary mt-4\">\r\n                            Generate\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {data ? <LineChart datas={data} /> : ''}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GraphGenerator;\r\n","/* eslint react/prop-types: 0 */\r\nimport React from 'react';\r\n\r\nconst Posts = () => {\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [posts, setPosts] = React.useState();\r\n\r\n    const ApiCall = () => {\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                console.log(response);\r\n                setPosts(response);\r\n            });\r\n        setLoading(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            ApiCall();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">User ID</th>\r\n                    <th scope=\"col\">Post ID</th>\r\n                    <th scope=\"col\">Title</th>\r\n                    <th scope=\"col\">Body</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {posts ? (\r\n                    <tr>\r\n                        <td scope=\"row\">{posts.userId}</td>\r\n                        <td>{posts.id}</td>\r\n                        <td>{posts.title}</td>\r\n                        <td>{posts.body}</td>\r\n                    </tr>\r\n                ) : (\r\n                    <tr>\r\n                        <td colspaw=\"4\">Loading...</td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react';\nimport NavBar from 'components/NavBar';\nimport GraphGenerator from './components/GraphGenerator';\nimport Posts from './components/Posts';\n\nconst App = () => (\n    <div className=\"App\">\n        <div className=\"container\">\n            <NavBar />\n            <GraphGenerator />\n            <Posts />\n        </div>\n    </div>\n);\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}